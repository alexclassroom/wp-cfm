// For format details, https://containers.dev/implementors/json_reference/.
{
  "name": "WP-CFM Plugin Development Environment",

	// Update the 'dockerComposeFile' list if you have more compose files or use different names.
	// The .devcontainer/docker-compose.yml file contains any overrides you need/want to make.
	"dockerComposeFile": [
		"../docker-compose.yml"
	],

	// The 'service' property is the name of the service for the container that VS Code should
	// use. Update this value and .devcontainer/docker-compose.yml to the real service name.
	"service": "app",

	"mounts": ["source=dind-var-lib-docker,target=/var/lib/docker,type=volume"],

	// The optional 'workspaceFolder' property is the path VS Code should open by default when
	// connected. This is typically a file mount in .devcontainer/docker-compose.yml
	"workspaceFolder": "/workspaces/${localWorkspaceFolderBasename}",

  "customizations": {
    "vscode": {
      // Set *default* container specific settings.json values on container create.
      "settings": {},

      // Add the IDs of extensions you want installed when the container is created.
      "extensions": ["ms-azuretools.vscode-docker"]
    }
  },

  // Features to add to the dev container. More info: https://containers.dev/features.
  "features": {
    "./local-features/welcome-message": "latest"
  },

  // Use 'forwardPorts' to make a list of ports inside the container available locally.
  "forwardPorts": [8080, 8081, 8027, 3306],

  // Maps a port number, "host:port" value, range, or regular expression to a set of default options. See port attributes for available options
  "portsAttributes": {
    "8080": {
      "label": "WordPress Development/Testing Site"
    },
    "8081": {
      "label": "phpMyAdmin"
    },
    "8027": {
      "label": "MailHog"
    },
    "3306": {
      "label": "MariaDB"
    }
  },

  // Use `onCreateCommand` to run commands as part of the container creation.
  //"onCreateCommand": "sudo chmod +x .devcontainer/install.sh && .devcontainer/install.sh",

  // Use 'postCreateCommand' to run commands after the container is created.
  "postCreateCommand": "sudo chmod +x .devcontainer/setup.sh && .devcontainer/setup.sh",

  // Use 'postStartCommand' to run commands after the container has started.
  "postStartCommand": "chmod +x .devcontainer/activate.sh && .devcontainer/activate.sh",

  // Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
  "remoteUser": "wp_php"
}
